{"ast":null,"code":"import { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL } from \"../constants/productConstants\";\nimport Axios from \"axios\";\nexport const listProducts = () => async dispatch => {\n  dispatch({\n    type: PRODUCT_LIST_REQUEST\n  }); //   fetching data from backend\n\n  try {\n    //sending ajax request to get products\n    const {\n      data\n    } = await Axios.get(\"/api/products\"); //changing the state of redux so based on that homescreen and products are updated.\n\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n}; // We will get a product by its id from backend and update redux store based on it\n\nexport const detailsProduct = productId => async dispatch => {\n  dispatch({\n    type: PRODUCT_DETAILS_REQUEST,\n    payload: productId\n  }); //   sending ajax request so wrap in try catch\n\n  try {\n    //get data from backend\n    const {\n      data\n    } = Axios.get(`/api/products/${productId}`); // dispatching successful operation and fit product information to action payload\n\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/priyaraghu/Documents/React_MERN/MERN/frontend/src/actions/productActions.js"],"names":["PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","Axios","listProducts","dispatch","type","data","get","payload","error","message","detailsProduct","productId","response"],"mappings":"AAAA,SACEA,oBADF,EAEEC,oBAFF,EAGEC,iBAHF,EAIEC,uBAJF,EAKEC,uBALF,EAMEC,oBANF,QAOO,+BAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACpDA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAET;AADC,GAAD,CAAR,CADoD,CAIpD;;AACA,MAAI;AACF;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAW,MAAMJ,KAAK,CAACK,GAAN,CAAU,eAAV,CAAvB,CAFE,CAGF;;AACAH,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,oBAAR;AAA8BW,MAAAA,OAAO,EAAEF;AAAvC,KAAD,CAAR;AACD,GALD,CAKE,OAAOG,KAAP,EAAc;AACdL,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,iBAAR;AAA2BU,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAA1C,KAAD,CAAR;AACD;AACF,CAbM,C,CAcP;;AACA,OAAO,MAAMC,cAAc,GAAIC,SAAD,IAAe,MAAOR,QAAP,IAAoB;AAC/DA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEN,uBAAR;AAAiCS,IAAAA,OAAO,EAAEI;AAA1C,GAAD,CAAR,CAD+D,CAE/D;;AACA,MAAI;AACF;AACA,UAAM;AAAEN,MAAAA;AAAF,QAAWJ,KAAK,CAACK,GAAN,CAAW,iBAAgBK,SAAU,EAArC,CAAjB,CAFE,CAGF;;AACAR,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,uBAAR;AAAiCQ,MAAAA,OAAO,EAAEF;AAA1C,KAAD,CAAR;AACD,GALD,CAKE,OAAOG,KAAP,EAAc;AACdL,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,oBADC;AAEPO,MAAAA,OAAO,EACLC,KAAK,CAACI,QAAN,IAAkBJ,KAAK,CAACI,QAAN,CAAeP,IAAf,CAAoBI,OAAtC,GACID,KAAK,CAACI,QAAN,CAAeP,IAAf,CAAoBI,OADxB,GAEID,KAAK,CAACC;AALL,KAAD,CAAR;AAOD;AACF,CAjBM","sourcesContent":["import {\n  PRODUCT_LIST_REQUEST,\n  PRODUCT_LIST_SUCCESS,\n  PRODUCT_LIST_FAIL,\n  PRODUCT_DETAILS_REQUEST,\n  PRODUCT_DETAILS_SUCCESS,\n  PRODUCT_DETAILS_FAIL,\n} from \"../constants/productConstants\";\nimport Axios from \"axios\";\n\nexport const listProducts = () => async (dispatch) => {\n  dispatch({\n    type: PRODUCT_LIST_REQUEST,\n  });\n  //   fetching data from backend\n  try {\n    //sending ajax request to get products\n    const { data } = await Axios.get(\"/api/products\");\n    //changing the state of redux so based on that homescreen and products are updated.\n    dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: PRODUCT_LIST_FAIL, payload: error.message });\n  }\n};\n// We will get a product by its id from backend and update redux store based on it\nexport const detailsProduct = (productId) => async (dispatch) => {\n  dispatch({ type: PRODUCT_DETAILS_REQUEST, payload: productId });\n  //   sending ajax request so wrap in try catch\n  try {\n    //get data from backend\n    const { data } = Axios.get(`/api/products/${productId}`);\n    // dispatching successful operation and fit product information to action payload\n    dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}